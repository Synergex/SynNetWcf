<?xml version='1.0'?>
<!--Generated by xmldoc v10.3.1a on 19 JUN 2015 11:13:57-->
<doc>
  <assembly>
    <name>AppDomainPoolManager</name>
  </assembly>
  <members>
    <member name="T:AppDomainProtection.AppDomainPoolManager">
       <summary>
       Implements a pooling mechanism for AppDomains.
       </summary>
    </member>
    <member name="M:AppDomainProtection.AppDomainPoolManager.#ctor">
       <summary>
       Initialize the pool on first use
       </summary>
    </member>
    <member name="M:AppDomainProtection.AppDomainPoolManager.Allocate">
       <summary>
       Allocate an AppDomain from the pool, or create a new one if
       the pool is empty.
       </summary>
       <param name="isNew">Indicates if a brand new AppDomain was created (so that the Initialize method may be called).</param>
    </member>
    <member name="M:AppDomainProtection.AppDomainPoolManager.ReturnToPool(System.AppDomain)">
       <summary>
       Returns an existing AppDoman to the pool.
       </summary>
    </member>
    <member name="T:AppDomainProtection.BackgroundDispatcher">
       <summary>
       The BackgroundDispatcher class can be used to control
       processing of background tasks on different threads
       </summary>
    </member>
    <member name="T:AppDomainProtection.BackgroundDispatcher.DispatcherItem">
       <summary>
       Definse the structure of live dispatchers.
       </summary>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.#ctor">
       <summary>
       Constructs a new BackgroundDispatcher object.
       </summary>
    </member>
    <member name="P:AppDomainProtection.BackgroundDispatcher.UtilityBackgroundDispatcher">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.AllocateDispatcher">
       <summary>
       
       </summary>
       <returns></returns>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.DeallocateDispatcher(AppDomainProtection.BackgroundDispatcher)">
       <summary>
       
       </summary>
       <param name="aDispatcher"></param>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.ShutdownDispatcher">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.Dispose">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.runDispatcher(System.Object)">
       <summary>
       Create and run a new dispatcher
       </summary>
       <param name="aSender"></param>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.Dispatch(AppDomainProtection.AppDomainDispatcherHelper)">
       <summary>
       
       </summary>
       <param name="aOperation"></param>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcher.invokeHelper(AppDomainProtection.AppDomainDispatcherHelper)">
       <summary>
       Perform the required task/operation. completionSource reutns the status.
       </summary>
       <param name="aOperation"></param>
    </member>
    <member name="T:AppDomainProtection.BackgroundDispatcherExtension">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.BackgroundDispatcherExtension.Dispatch(AppDomainProtection.BackgroundDispatcher,System.Action)">
       <summary>
       
       </summary>
       <param name="aDispatcher"></param>
       <param name="aOperation"></param>
       <returns></returns>
    </member>
    <member name="T:AppDomainProtection.AppDomainDispatcherHelper">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.AppDomainDispatcherHelper.#ctor(System.Action,System.Threading.Tasks.TaskCompletionSource{Boolean})">
       <summary>
       
       </summary>
       <param name="aAction"></param>
       <param name="aCompletionSource"></param>
    </member>
    <member name="M:AppDomainProtection.AppDomainDispatcherHelper.RunAction">
       <summary>
       
       </summary>
    </member>
    <member name="M:AppDomainProtection.AppDomainDispatcherHelper.SetResult(System.Boolean)">
       <summary>
       
       </summary>
       <param name="aResult"></param>
    </member>
    <member name="M:AppDomainProtection.AppDomainDispatcherHelper.SetException(System.Exception)">
       <summary>
       
       </summary>
       <param name="aException"></param>
    </member>
    <member name="M:AppDomainProtection.ServiceInstanceProvider.#ctor(System.Type)">
       <summary>
       Constructs a new ServiceInstanceProvider object.
       </summary>
       <param name="targetType">The type of the class or interface that defines the WCF service contract.</param>
    </member>
    <member name="M:AppDomainProtection.ServiceInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
       <summary>
       Use the GetInstance(InstanceContext, Message) method to control the exact service
       object that a WCF service receives when it attempts to create a new one.
       </summary>
       <param name="context">The current InstanceContext object.</param>
       <param name="msg">The message that triggered the creation of a service object.</param>
    </member>
    <member name="M:AppDomainProtection.ServiceInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
       <summary>
       Use the GetInstance(InstanceContext) method to control the exact service object
       that a WCF service receives when it attempts to create a new one.
       </summary>
       <param name="context">The current InstanceContext object.</param>
    </member>
    <member name="M:AppDomainProtection.ServiceInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
       <summary>
       Use the ReleaseInstance method to perform some custom resource disposal or
       other recycling customization when a service recycles a service object.
       </summary>
       <param name="context">The service&apos;s instance context.</param>
       <param name="instance">The service object to be recycled.</param>
    </member>
    <member name="M:AppDomainProtection.SingletonBehaviorAttribute.#ctor(System.Type)">
       <summary>
       Constructs a new SingletonBehaviorAttribute object.
       </summary>
       <param name="targetType">The type of the class or interface that defines the WCF service contract.</param>
    </member>
    <member name="P:AppDomainProtection.SingletonBehaviorAttribute.TargetContract">
       <summary>
       Gets the type of the contract to which the contract behavior is applicable.
       </summary>
    </member>
    <member name="M:AppDomainProtection.SingletonBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
       <summary>
       Configures any binding elements to support the contract behavior.
       Implement the AddBindingParameters method to provide binding elements with the extra objects they require to support the contract behavior.
       This method is called once for each endpoint that uses the specified service contract.
       </summary>
       <param name="description">The contract description to modify.</param>
       <param name="endpoint">The endpoint to modify.</param>
       <param name="parameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:AppDomainProtection.SingletonBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
       <summary>
       Implements a modification or extension of the client across a contract.
       </summary>
       <param name="description">The contract description for which the extension is intended.</param>
       <param name="endpoint">The endpoint.</param>
       <param name="runtime">The client runtime.</param>
    </member>
    <member name="M:AppDomainProtection.SingletonBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
       <summary>
       Implements a modification or extension of the client across a contract. Implement the
       ApplyDispatchBehavior to view, modify, or add custom extensions to the service runtime
       across all messages in a specific contract or for one specific operation in that contract. 
       The ApplyDispatchBehavior method can throw a NotImplementedException exception if the
       behavior is only intended for use in a client application. This method is called once
       for each endpoint that uses the specified service contract. Note that there can be two
       operations with the same name in the description (one in each direction), so if you must
       iterate through operations where the contract is a duplex contract, you must correlate
       the message direction between the endpoint DispatchRuntime and that returned by the
       CallbackClientRuntime property. In addition, because other behaviors may have already
       added or removed some operations from the runtime, there is no guarantee that there are
      
       the Operations property.
       </summary>
       <param name="description">The contract description to be modified.</param>
       <param name="endpoint">The endpoint that exposes the contract.</param>
       <param name="dispatch">The dispatch runtime that controls service execution.</param>
    </member>
    <member name="M:AppDomainProtection.SingletonBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
       <summary>
       Confirms that the contract and endpoint can support the contract behavior. Implement the
       Validate method to confirm that the contract description is sufficient to support the
       custom contract behavior. Implementations can inspect the description and either throw
       or return no value. This method is called once for each endpoint that uses the specified
       service contract.
       </summary>
       <param name="description">The contract to validate.</param>
       <param name="endpoint">The endpoint to validate.</param>
    </member>
  </members>
</doc>
