











; THIS CODE IS NOT CURRENTLY USED. THE C# VERSION OF THE CODE IN THE
; APPDOMAINPROTECTIONCORE ASSEMBLY IS CURRENTLY BEING USED.















;;*****************************************************************************
;;
;; Title:       MarshaledOperationInvokerBehavior.dbl
;;
;; Type:        Class
;;
;; Description: Implements methods that extend the run-time behavior of
;;              operations in a WCF service.
;;
;; Date:        17th June 2015
;;
;; Authors:     Jeff Greene      Synergex Development
;;                               http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2015, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

;import System
;import System.Reflection
;import System.ServiceModel.Channels
;import System.ServiceModel.Description
;import System.ServiceModel.Dispatcher
;
;.array 0
;
;namespace AppDomainProtection
;	
;	public class MarshaledOperationInvokerBehavior implements IOperationBehavior
;		
;		defaultBehavior, @IOperationBehavior
;		
;		public method MarshaledOperationInvokerBehavior
;			endparams
;		proc
;			defaultBehavior = ^as(^typeof(IOperationInvoker).Assembly.GetType("System.ServiceModel.Dispatcher.OperationInvokerBehavior").GetConstructor(new Type[0] ).Invoke(^null), IOperationBehavior)
;		endmethod
;		
;		public method AddBindingParameters, void
;			description, @OperationDescription 
;			bindingParameters, @BindingParameterCollection 
;			endparams
;		proc
;			defaultBehavior.AddBindingParameters(description, bindingParameters)
;		endmethod
;		
;		public method ApplyClientBehavior, void
;			description, @OperationDescription 
;			operation, @ClientOperation 
;			endparams
;		proc
;			defaultBehavior.ApplyClientBehavior(description, operation)
;		endmethod
;		
;		private static readonly TaskTResult, @PropertyInfo, ^typeof(OperationDescription).GetProperty("TaskTResult", BindingFlags.NonPublic | BindingFlags.Instance)
;		
;		public method ApplyDispatchBehavior, void
;			description, @OperationDescription 
;			operation, @DispatchOperation 
;			endparams
;		proc
;			if (description.TaskMethod != ^null) then
;				operation.Invoker = new MarshalableOperationInvocation(description.TaskMethod, ^as(TaskTResult.GetValue(description), Type))
;			else
;				defaultBehavior.ApplyDispatchBehavior(description, operation)
;		endmethod
;		
;		public method Validate, void
;			description, @OperationDescription 
;			endparams
;		proc
;			defaultBehavior.Validate(description)
;		endmethod
;
;	endclass
;
;endnamespace
