;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System.Collections.Generic
import Synergex.SynergyDE.Select

namespace PartsSystem

    ;;; <summary>
    ;;; This partial class exposes the CRUD methods for ProductGroup.
    ;;; </summary>
    public partial class PartsSystemAPI

        ;;; <summary>
        ;;; Create a ProductGroup record
        ;;; </summary>
        ;;; <param name="aProductGroup">Passed ProductGroup object (@ProductGroup)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method CreateProductGroup, MethodStatus
            required in  aProductGroup, @ProductGroup
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0

            try
            begin
                open(ch,u:i,"DAT:groups.ism")
                store(ch,aProductGroup.Record)
                aErrorMessage = ""
            end
            catch (ex, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found, check appSettings in Web.config or App.config!"
            end
            catch (ex, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record already exists!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while creating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Read a ProductGroup record by primary key (GROUP_ID: primary access key)
        ;;; </summary>
        ;;; <param name="aGroupId">Passed group id (string)</param>
        ;;; <param name="aProductGroup">Returned ProductGroup object (@ProductGroup)</param>
        ;;; <param name="aGrfa">Returned GRFA data (byte array)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method ReadProductGroup, MethodStatus
            required in  aGroupId, string
            required out aProductGroup, @ProductGroup
            required out aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0

            data productGroupRec, strProductGroup
            init productGroupRec
            productGroupRec.group_id = aGroupId

            try
            begin
                data grfa, a10
                open(ch=0,I:I,"DAT:groups.ism")
                read(ch,productGroupRec,%keyval(ch,productGroupRec,0),GETRFA:grfa)
                aProductGroup = new ProductGroup((String)productGroupRec)
                aGrfa = grfa
                aErrorMessage = ""
            end
            catch (ex, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while reading record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Real all ProductGroup records
        ;;; </summary>
        ;;; <param name="aProductGroups">Returned collection of ProductGroup objects (@List<ProductGroup>)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method ReadAllProductGroups, MethodStatus
            required out aProductGroups, @List<ProductGroup>
            required out aErrorMessage, string
        proc
            aErrorMessage = ""
            data status = MethodStatus.Success
            aProductGroups = new List<ProductGroup>()

            try
            begin
                data productGroupRec, strProductGroup
                foreach productGroupRec in new Select(new From("DAT:groups.ism",productGroupRec))
                    aProductGroups.Add(new ProductGroup((String)productGroupRec))
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while reading records: {0}",ex.Message)
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Update a ProductGroup record
        ;;; </summary>
        ;;; <param name="aProductGroup">Passed/returned ProductGroup object (@ProductGroup)</param>
        ;;; <param name="aGrfa">Passed/returned GRFA</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method UpdateProductGroup, MethodStatus
            required inout aProductGroup, @ProductGroup
            required inout aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data productGrouprec, strProductGroup
            data grfa, a10

            try
            begin
                open(ch,u:i,"DAT:groups.ism")
                ;;Attempt to read the original record by GRFA to make sure that nobody else has modified or deleted it
                grfa = aGrfa
                read(ch,productGrouprec,RFA:grfa,GETRFA:grfa)
                write(ch,aProductGroup.Record,,GETRFA:grfa)
                aGrfa = grfa
                aErrorMessage = ""
            end
            catch (ex, @RecordNotSameException)
            begin
                ;;Failed to lock the original record, it must have been changed
                ;;by another process since this user obtained it. We'll return
                ;;the new record and it's GRFA to the user
                aProductGroup = new ProductGroup((String)productGrouprec)
                aGrfa = grfa
                status = MethodStatus.Fail
                aErrorMessage = "Record was changed by another user! A copy of the current record was returned."
            end
            catch (ex, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Duplicate key error!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while updating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Delete a ProductGroup record
        ;;; </summary>
        ;;; <param name="aGrfa">Passed GRFA (string)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method DeleteProductGroup, MethodStatus
            required in aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data productGrouprec, strProductGroup
            data grfa, a10

            try
            begin
                open(ch,u:i,"DAT:groups.ism")
                ;;Attempt to read the original record by GRFA to make sure that nobody else has modified or deleted it
                grfa = aGrfa
                read(ch,productGrouprec,RFA:grfa)
                delete(ch)
                aErrorMessage = ""
            end
            catch (ex, @RecordNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "The record was updated by another user!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while deleting record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Determine if a ProductGroup record exists
        ;;; </summary>
        ;;; <param name="aGroupId">Passed group id (string)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method ProductGroupExists, MethodStatus
            required in  aGroupId, string
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data productGrouprec, strProductGroup

            init productGrouprec
            productGrouprec.group_id = aGroupId

            try
            begin
                open(ch,I:I,"DAT:groups.ism")
                find(ch,,%keyval(ch,productGrouprec,0))
                aErrorMessage = ""
            end
            catch (ex, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while locating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

    endclass

endnamespace
