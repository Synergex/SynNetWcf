<?xml version='1.0'?>
<!--Generated by xmldoc v10.3.1a on 18 JUN 2015 11:04:50-->
<doc>
  <assembly>
    <name>PartsSystem</name>
  </assembly>
  <members>
    <member name="T:PartsSystem.DataUtils">
       <summary>
       Various data conversion utility methods
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.DateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D8FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D6FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.NullableDateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D8FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D6FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.TimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D6FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D4FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.NullableTimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D6FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:PartsSystem.DataUtils.D4FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="M:PartsSystem.Part.#ctor">
       <summary>
       Construct an empty Part object
       </summary>
    </member>
    <member name="M:PartsSystem.Part.#ctor(System.String)">
       <summary>
       Construct a Part object containing the data from a PART record
       </summary>
       <param name="aPart">Passed Part record</param>
    </member>
    <member name="M:PartsSystem.Part.SetValuesOnDeserializing(System.Runtime.Serialization.StreamingContext)">
       <summary>
      
       object in such a magical way that the constructors are not called!!! This causes
       problems because we need to instantiate our &quot;wrapper&quot; object. This method solves
       that problem by doing the &quot;new&quot; when deserialization takes place.
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Record">
       <summary>
       Provide a mechanism for INTERNAL code to be able to get the data as a record.
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Id">
       <summary>
       part ID
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Groupid">
       <summary>
       Group ID
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Supplierid">
       <summary>
       supplier id
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Description">
       <summary>
       Description
       </summary>
    </member>
    <member name="P:PartsSystem.Part.TechnicalInfo">
       <summary>
       Technical info
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Quantity">
       <summary>
       quantity in stock
       </summary>
    </member>
    <member name="P:PartsSystem.Part.CostPrice">
       <summary>
       cost price
       </summary>
    </member>
    <member name="P:PartsSystem.Part.Spare">
       <summary>
       
       </summary>
    </member>
    <member name="T:PartsSystem.PartsSystemAPI">
       <summary>
       This partial class exposes the CRUD methods for Part.
       </summary>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.CreatePart(PartsSystem.Part)">
       <summary>
       Create a Part record
       </summary>
       <param name="aPart">Passed Part object (@Part)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadPart(System.String,PartsSystem.Part,System.Byte[#])">
       <summary>
       Read a Part record by primary key (ID: primary part id)
       </summary>
       <param name="aId">Passed part ID (string)</param>
       <param name="aPart">Returned Part object (@Part)</param>
       <param name="aGrfa">Returned GRFA data (byte array)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadAllParts(System.Collections.Generic.List{Part})">
       <summary>
       Real all Part records
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.UpdatePart(PartsSystem.Part,System.Byte[#])">
       <summary>
       Update a Part record
       </summary>
       <param name="aPart">Passed/returned Part object (@Part)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.DeletePart(System.Byte[#])">
       <summary>
       Delete a Part record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.PartExists(System.String)">
       <summary>
       Determine if a Part record exists
       </summary>
       <param name="aId">Passed part ID (string)</param>
       <returns></returns>
    </member>
    <member name="T:PartsSystem.PartsSystemAPI">
       <summary>
       This partial class exposes CUSTOM methods for Part.
       </summary>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadSupplierParts(System.String,System.Collections.Generic.List{Part})">
       <summary>
       Real all Part records from a supplier.
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
    <member name="T:PartsSystem.PartsSystemAPI">
       <summary>
       This partial class exposes the CRUD methods for ProductGroup.
       </summary>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.CreateProductGroup(PartsSystem.ProductGroup)">
       <summary>
       Create a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed ProductGroup object (@ProductGroup)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadProductGroup(System.String,PartsSystem.ProductGroup,System.Byte[#])">
       <summary>
       Read a ProductGroup record by primary key (GROUP_ID: primary access key)
       </summary>
       <param name="aGroupId">Passed group id (string)</param>
       <param name="aProductGroup">Returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Returned GRFA data (byte array)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadAllProductGroups(System.Collections.Generic.List{ProductGroup})">
       <summary>
       Real all ProductGroup records
       </summary>
       <param name="aProductGroups">Returned collection of ProductGroup objects (@List&lt;ProductGroup&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.UpdateProductGroup(PartsSystem.ProductGroup,System.Byte[#])">
       <summary>
       Update a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed/returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.DeleteProductGroup(System.Byte[#])">
       <summary>
       Delete a ProductGroup record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ProductGroupExists(System.String)">
       <summary>
       Determine if a ProductGroup record exists
       </summary>
       <param name="aGroupId">Passed group id (string)</param>
       <returns></returns>
    </member>
    <member name="T:PartsSystem.PartsSystemAPI">
       <summary>
       This partial class exposes the CRUD methods for Supplier.
       </summary>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.CreateSupplier(PartsSystem.Supplier)">
       <summary>
       Create a Supplier record
       </summary>
       <param name="aSupplier">Passed Supplier object (@Supplier)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadSupplier(System.String,PartsSystem.Supplier,System.Byte[#])">
       <summary>
       Read a Supplier record by primary key (SUPPLIER_ID: primary access key)
       </summary>
       <param name="aSupplierId">Passed supplier id (string)</param>
       <param name="aSupplier">Returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Returned GRFA data (byte array)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.ReadAllSuppliers(System.Collections.Generic.List{Supplier})">
       <summary>
       Real all Supplier records
       </summary>
       <param name="aSuppliers">Returned collection of Supplier objects (@List&lt;Supplier&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.UpdateSupplier(PartsSystem.Supplier,System.Byte[#])">
       <summary>
       Update a Supplier record
       </summary>
       <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.DeleteSupplier(System.Byte[#])">
       <summary>
       Delete a Supplier record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:PartsSystem.PartsSystemAPI.SupplierExists(System.String)">
       <summary>
       Determine if a Supplier record exists
       </summary>
       <param name="aSupplierId">Passed supplier id (string)</param>
       <returns></returns>
    </member>
    <member name="P:PartsSystem.PartWrapper.Id">
       <summary>
       part ID (ID, A20)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.Groupid">
       <summary>
       Group ID (GROUPID, A20)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.Supplierid">
       <summary>
       supplier id (SUPPLIERID, A20)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.Description">
       <summary>
       Description (DESCRIPTION, A50)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.TechnicalInfo">
       <summary>
       Technical info (TECHNICAL_INFO, A500)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.Quantity">
       <summary>
       quantity in stock (QUANTITY, I4)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.CostPrice">
       <summary>
       cost price (COST_PRICE, D10.2)
       </summary>
    </member>
    <member name="P:PartsSystem.PartWrapper.Spare">
       <summary>
        (SPARE, A76)
       </summary>
    </member>
    <member name="M:PartsSystem.ProductGroup.#ctor">
       <summary>
       Construct an empty ProductGroup object
       </summary>
    </member>
    <member name="M:PartsSystem.ProductGroup.#ctor(System.String)">
       <summary>
       Construct a ProductGroup object containing the data from a PRODUCT_GROUP record
       </summary>
       <param name="aProductGroup">Passed ProductGroup record</param>
    </member>
    <member name="M:PartsSystem.ProductGroup.SetValuesOnDeserializing(System.Runtime.Serialization.StreamingContext)">
       <summary>
      
       object in such a magical way that the constructors are not called!!! This causes
       problems because we need to instantiate our &quot;wrapper&quot; object. This method solves
       that problem by doing the &quot;new&quot; when deserialization takes place.
       </summary>
    </member>
    <member name="P:PartsSystem.ProductGroup.Record">
       <summary>
       Provide a mechanism for INTERNAL code to be able to get the data as a record.
       </summary>
    </member>
    <member name="P:PartsSystem.ProductGroup.GroupId">
       <summary>
       group id
       </summary>
    </member>
    <member name="P:PartsSystem.ProductGroup.Description">
       <summary>
       description
       </summary>
    </member>
    <member name="P:PartsSystem.ProductGroupWrapper.GroupId">
       <summary>
       group id (GROUP_ID, A20)
       </summary>
    </member>
    <member name="P:PartsSystem.ProductGroupWrapper.Description">
       <summary>
       description (DESCRIPTION, A100)
       </summary>
    </member>
    <member name="M:PartsSystem.Supplier.#ctor">
       <summary>
       Construct an empty Supplier object
       </summary>
    </member>
    <member name="M:PartsSystem.Supplier.#ctor(System.String)">
       <summary>
       Construct a Supplier object containing the data from a SUPPLIER record
       </summary>
       <param name="aSupplier">Passed Supplier record</param>
    </member>
    <member name="M:PartsSystem.Supplier.SetValuesOnDeserializing(System.Runtime.Serialization.StreamingContext)">
       <summary>
      
       object in such a magical way that the constructors are not called!!! This causes
       problems because we need to instantiate our &quot;wrapper&quot; object. This method solves
       that problem by doing the &quot;new&quot; when deserialization takes place.
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.Record">
       <summary>
       Provide a mechanism for INTERNAL code to be able to get the data as a record.
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.SupplierId">
       <summary>
       supplier id
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.Name">
       <summary>
       supplier name
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.Address1">
       <summary>
       addrss line 1
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.Address2">
       <summary>
       address line 2
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.Address3">
       <summary>
       address line 3
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.City">
       <summary>
       city
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.PostalCode">
       <summary>
       post code
       </summary>
    </member>
    <member name="P:PartsSystem.Supplier.WebAddress">
       <summary>
       web address
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.SupplierId">
       <summary>
       supplier id (SUPPLIER_ID, A20)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.Name">
       <summary>
       supplier name (NAME, A50)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.Address1">
       <summary>
       addrss line 1 (ADDRESS_1, A50)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.Address2">
       <summary>
       address line 2 (ADDRESS_2, A50)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.Address3">
       <summary>
       address line 3 (ADDRESS_3, A50)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.City">
       <summary>
       city (CITY, A30)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.PostalCode">
       <summary>
       post code (POSTAL_CODE, A10)
       </summary>
    </member>
    <member name="P:PartsSystem.SupplierWrapper.WebAddress">
       <summary>
       web address (WEB_ADDRESS, A78)
       </summary>
    </member>
  </members>
</doc>
