;;******************************************************************************
;; WARNING: THIS FILE WAS CODE GENERATED. CHANGES MAY BE LOST IF REGENERATED
;;******************************************************************************

import System.Collections.Generic
import Synergex.SynergyDE.Select

namespace PartsSystem

    ;;; <summary>
    ;;; This partial class exposes the CRUD methods for Supplier.
    ;;; </summary>
    public partial class PartsSystemAPI

        ;;; <summary>
        ;;; Create a Supplier record
        ;;; </summary>
        ;;; <param name="aSupplier">Passed Supplier object (@Supplier)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method CreateSupplier, MethodStatus
            required in  aSupplier, @Supplier
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0

            try
            begin
                open(ch,u:i,"DAT:suppliers.ism")
                store(ch,aSupplier.Record)
                aErrorMessage = ""
            end
            catch (ex, @NoFileFoundException)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = "File not found, check appSettings in Web.config or App.config!"
            end
            catch (ex, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record already exists!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while creating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Read a Supplier record by primary key (SUPPLIER_ID: primary access key)
        ;;; </summary>
        ;;; <param name="aSupplierId">Passed supplier id (string)</param>
        ;;; <param name="aSupplier">Returned Supplier object (@Supplier)</param>
        ;;; <param name="aGrfa">Returned GRFA data (byte array)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method ReadSupplier, MethodStatus
            required in  aSupplierId, string
            required out aSupplier, @Supplier
            required out aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0

            data supplierRec, strSupplier
            init supplierRec
            supplierRec.supplier_id = aSupplierId

            try
            begin
                data grfa, a10
                open(ch=0,I:I,"DAT:suppliers.ism")
                read(ch,supplierRec,%keyval(ch,supplierRec,0),GETRFA:grfa)
                aSupplier = new Supplier((String)supplierRec)
                aGrfa = grfa
                aErrorMessage = ""
            end
            catch (ex, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while reading record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Real all Supplier records
        ;;; </summary>
        ;;; <param name="aSuppliers">Returned collection of Supplier objects (@List<Supplier>)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method ReadAllSuppliers, MethodStatus
            required out aSuppliers, @List<Supplier>
            required out aErrorMessage, string
        proc
            aErrorMessage = ""
            data status = MethodStatus.Success
            aSuppliers = new List<Supplier>()

            try
            begin
                data supplierRec, strSupplier
                foreach supplierRec in new Select(new From("DAT:suppliers.ism",supplierRec))
                    aSuppliers.Add(new Supplier((String)supplierRec))
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while reading records: {0}",ex.Message)
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Update a Supplier record
        ;;; </summary>
        ;;; <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
        ;;; <param name="aGrfa">Passed/returned GRFA</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method UpdateSupplier, MethodStatus
            required inout aSupplier, @Supplier
            required inout aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data supplierrec, strSupplier
            data grfa, a10

            try
            begin
                open(ch,u:i,"DAT:suppliers.ism")
                ;;Attempt to read the original record by GRFA to make sure that nobody else has modified or deleted it
                grfa = aGrfa
                read(ch,supplierrec,RFA:grfa,GETRFA:grfa)
                write(ch,aSupplier.Record,,GETRFA:grfa)
                aGrfa = grfa
                aErrorMessage = ""
            end
            catch (ex, @RecordNotSameException)
            begin
                ;;Failed to lock the original record, it must have been changed
                ;;by another process since this user obtained it. We'll return
                ;;the new record and it's GRFA to the user
                aSupplier = new Supplier((String)supplierrec)
                aGrfa = grfa
                status = MethodStatus.Fail
                aErrorMessage = "Record was changed by another user! A copy of the current record was returned."
            end
            catch (ex, @DuplicateException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Duplicate key error!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while updating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Delete a Supplier record
        ;;; </summary>
        ;;; <param name="aGrfa">Passed GRFA (string)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method DeleteSupplier, MethodStatus
            required in aGrfa, [#]byte
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data supplierrec, strSupplier
            data grfa, a10

            try
            begin
                open(ch,u:i,"DAT:suppliers.ism")
                ;;Attempt to read the original record by GRFA to make sure that nobody else has modified or deleted it
                grfa = aGrfa
                read(ch,supplierrec,RFA:grfa)
                delete(ch)
                aErrorMessage = ""
            end
            catch (ex, @RecordNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "The record was updated by another user!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while deleting record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

        ;;; <summary>
        ;;; Determine if a Supplier record exists
        ;;; </summary>
        ;;; <param name="aSupplierId">Passed supplier id (string)</param>
        ;;; <param name="aErrorMessage">Returned error message (blank if return value is MethodStatus.Success)</param>
        ;;; <returns>Method status</returns>
        public method SupplierExists, MethodStatus
            required in  aSupplierId, string
            required out aErrorMessage, string
        proc
            data status = MethodStatus.Success
            data ch = 0
            data supplierrec, strSupplier

            init supplierrec
            supplierrec.supplier_id = aSupplierId

            try
            begin
                open(ch,I:I,"DAT:suppliers.ism")
                find(ch,,%keyval(ch,supplierrec,0))
                aErrorMessage = ""
            end
            catch (ex, @EndOfFileException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @KeyNotSameException)
            begin
                status = MethodStatus.Fail
                aErrorMessage = "Record not found!"
            end
            catch (ex, @Exception)
            begin
                status = MethodStatus.FatalError
                aErrorMessage = String.Format("Error while locating record: {0}",ex.Message)
            end
            finally
            begin
                if (ch&&chopen(ch))
                    close ch
            end
            endtry

            mreturn status

        endmethod

    endclass

endnamespace
